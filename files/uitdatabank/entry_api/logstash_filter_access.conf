json {
  source => "message"
  remove_field => [ "message", "path", "type" ]
}

grok {
  pattern_definitions => { "UUIDTYPE" => "((event|place|organizer)(?:s|))" }
  match => { "requestPath" => "^/%{UUIDTYPE:uniqueIDType}/%{UUID:uniqueID}(?:/|$)" }
}

urldecode {
  field => query
}

kv {
  source => clientProperties
  target => clientProperties
  remove_char_key => " "
  value_split => "|"
  field_split => ","
}

ruby {
  code => 'client_properties = event.get("clientProperties"); if client_properties == "-"; event.set("clientProperties", {}) else event.set("clientProperties", { "cluster" => [client_properties["cluster"]].flatten }) end'
}

kv {
  source => query
  target => parameters
  field_split => "&?"
  remove_char_key => "\[\]"
}

date {
  match => [ "time" , "yyyy-MM-dd HH:mm:ss.SSS" ]
}

mutate {
  rename       => { "[host][name]" => "host" }
  add_field    => { "[@metadata][log_type]" => ""%{[fields][log_type]}" }
  add_field    => { "[@metadata][environment]" => ""%{[fields][environment]}" }
  remove_field => ["beat", "tags", "source", "offset", "@version", "fields", "@timestamp"]
}
